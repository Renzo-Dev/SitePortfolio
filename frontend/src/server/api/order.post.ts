// API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ Telegram

export default defineEventHandler(async (event) => {
	const config = useRuntimeConfig()
	const body = await readBody(event)

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
	if (!body.name || !body.email || !body.message) {
		throw createError({
			statusCode: 400,
			message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
		})
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ email
	const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
	if (!emailRegex.test(body.email)) {
		throw createError({
			statusCode: 400,
			message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å',
		})
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
	const phoneInfo = body.phone ? `\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${body.phone}` : ''
	const telegramInfo = body.telegram ? `\nüì± Telegram: ${body.telegram}` : ''
	const message = `
üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Å–∞–π—Ç–∞!

üë§ –ò–º—è: ${body.name}
üìß Email: ${body.email}${phoneInfo}${telegramInfo}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
${body.message}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
	`.trim()

	try {
		// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
		const telegramUrl = `https://api.telegram.org/bot${config.telegramBotToken}/sendMessage`

		await $fetch(telegramUrl, {
			method: 'POST',
			body: {
				chat_id: config.telegramChatId,
				text: message,
				parse_mode: 'HTML',
			},
		})

		return {
			success: true,
			message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
		}
	} catch (error: unknown) {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
		// –í production –ª–æ–≥–∏ –∏–¥—É—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∂—É—Ä–Ω–∞–ª
		throw createError({
			statusCode: 500,
			message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
			data: import.meta.dev ? error : undefined, // –î–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –≤ dev
		})
	}
})
