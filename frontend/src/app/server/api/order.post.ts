// API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ —Å —Ñ–æ—Ä–º—ã –≤ Telegram
import { z } from 'zod'

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
const orderSchema = z.object({
  name: z.string().min(2),
  email: z.string().email(),
  telegram: z.string().optional(),
  message: z.string().min(10)
})

export default defineEventHandler(async (event) => {
  const config = useRuntimeConfig()
  const token = config.telegramToken

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
  if (!token) {
    throw createError({
      statusCode: 500,
      statusMessage: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN'
    })
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  const body = await readBody(event)
  const result = orderSchema.safeParse(body)

  if (!result.success) {
    throw createError({
      statusCode: 422,
      statusMessage: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      data: result.error.flatten()
    })
  }

  const payload = result.data

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
  const message = `üÜï –ù–æ–≤—ã–π lead —Å —Å–∞–π—Ç–∞\n\n` +
    `–ò–º—è: ${payload.name}\n` +
    `Email: ${payload.email}\n` +
    `Telegram: ${payload.telegram || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
    `–ó–∞–ø—Ä–æ—Å: ${payload.message}`

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram Bot API
  await $fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
    method: 'POST',
    body: {
      chat_id: config.public.telegramChatId,
      text: message,
      parse_mode: 'Markdown'
    }
  })

  return { status: 'ok' }
})

